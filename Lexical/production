S -> Func Funcs
Funcs -> Func Funcs
Funcs -> ~
Func -> ValueType Id ( Args ) FuncBody
ValueType -> int
ValueType -> short
ValueType -> long
ValueType -> double
ValueType -> float
ValueType -> char
ValueType -> boolean
ValueType -> void
ValueType -> Object
Args -> ValueType Id Arg
Args -> ~
Arg -> , ValueType Id Arg
Arg -> ~
FuncBody -> ;
FuncBody -> Block;
Block -> { DefineStmts Stmts }
DefineStmts -> DefineStmt DefineStmts
DefineStmts -> ~
DefineStmt -> ValueType Id Init Vars
Init -> = Expression
Init -> ~
Vars -> , Id Init Vars
Vars -> ~
Stmts -> Stmt Stmts
Stmts -> ~
Stmt -> AssignStmt
Stmt -> JumpStmt
Stmt -> LoopStmt
Stmt -> BranchStmt
AssignStmt -> Expression ;
JumpStmt -> continue ;
JumpStmt -> break ;
JumpStmt -> return ReturnValue ;
LoopStmt -> while ( LogicalExpression ) Block
LoopStmt -> do Block while ( LogicalExpression ) ;
BranchStmt -> if ( LogicalExpression ) Block Result
BranchStmt -> switch ( Id ) { CaseStmt CaseStmts DefaultStmt }
LogicalExpression -> true
LogicalExpression -> false
Result -> else Block
CaseStmts -> CaseStmt CaseStmts
CaseStmts -> ~
CaseStmt -> case Const : Block
DefaultStmt -> default : Block
ReturnValue -> Expression
ReturnValue -> ~
Expression -> Value Operation
Operation -> CompareOperator Value
Operation -> EqualOperator Value
Operation -> ~
CompareOperator -> ==
CompareOperator -> !=
CompareOperator -> <=
CompareOperator -> >=
CompereOperator -> <
CompareOperator -> >
EqualOperator -> =
EqualOperator -> +=
EqualOperator -> -=
EqualOperator -> /=
EqualOperator -> %=
EqualOperator -> *=
Value -> Item Value'
Value' -> + Item Value'
Value' -> - Item Value'
Value' -> ~
Item -> Factor Item'
Item' -> * Factor Item'
Item' -> / Factor Item'
Item' -> % Factor Item'
Item' -> ~
Factor -> ( Value )
Factor -> Id CallFunc
Factor -> Const
CallFunc -> ( Es )
CallFunc -> ~
Es -> ReturnValue isnull_es
isnull_es -> , ReturnValue isnull_es
isnull_es ->~
Const -> num_const
Const -> FLOAT
Const -> CHAR
Const -> STR
num_const -> INT10
num_const -> INT8
num_const -> INT16